openapi: 3.0.3
info:
  title: Laravel REST API
  version: 1.0.0
servers:
  - url: http://localhost:60080/api/v1
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '409':
          description: Email or phone already exists
        '422':
          description: Validation error
  /v1/auth/login:
    post:
      tags:
        - Auth
      summary: Log in a user and return token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
        '422':
          description: Validation error
  /users/me:
    get:
      tags:
        - Users
      summary: Get current authenticated user's details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserResponse'
        '401':
          description: Unauthorized â€“ missing or invalid token
components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - phone
        - password
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          example: Doe
        email:
          type: string
          format: email
          example: john@example.com
        phone:
          type: string
          pattern: ^\\+?[1-9]\\d{7,14}$
          example: 40700222999
          description: Phone number in international format
        password:
          type: string
          minLength: 6
          example: secret123
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: Account created successfully.
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          minLength: 6
          maxLength: 255
          example: john@example.com
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 255
          example: secret123
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful.
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    CurrentUserResponse:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        phone:
          type: string
          example: 40700222999
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
